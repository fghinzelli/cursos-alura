{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","console","log","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","Error","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n    \n    constructor() {\n        \n        this._http = new HttpService();\n    }\n    \n    obterNegociacoesDaSemana() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                });  \n       });        \n    }\n    \n    obterNegociacoesDaSemanaAnterior() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                });  \n       }); \n       \n        \n    }\n    \n    obterNegociacoesDaSemanaRetrasada() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                });  \n       }); \n    }    \n    \n    \n    obterNegociacoes() {\n\n        return new Promise((resolve, reject) => {\n\n            Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ]).then(periodos => {\n\n                let negociacoes = periodos\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n                resolve(negociacoes);\n\n            }).catch(erro => reject(erro));\n        });\n    }    \n\n    cadastra(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação');\n            });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obtera as negociações');\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.apagaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n\n    importa(listaAtual) {\n\n        return this.obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            ).catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível importar as negociações');\n            });\n    }\n}\n\n"]}