{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBZ,+BAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAxBM,CAAP;AAyBH;AAjCL;AAAA;AAAA,0CAmCyBnB,UAnCzB,EAmCqC;AAC7BH,uBAAOuB,OAAP,CAAe,iBAAS;AACpB,wBAAGpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIvB,WAAWwB,iBAAX,CAA6BD,KAA7B;AACJvB,+BAAWyB,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AAEH,iBALD;AAMH;AA1CL;AAAA;AAAA,8CA4C6B;AACrB,oBAAI1B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;AAjDL;;AAAA;AAAA;AAmDH,CA5DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() { \n\n    const stores = ['negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe';\n\n    var connection = null;\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error('Não é possível intanciar esta classe');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n                    \n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n                    \n                    if (!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar a conexão');\n                        }\n                    }\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n\n                    reject(e.target.error.name);\n                };\n            })\n        }      \n\n        static _createStores(connection) {\n            stores.forEach(store => {\n                if(connection.objectStoreNames.contains(store)) \n                    connection.deleteObjectStore(store);\n                connection.createObjectStore(store, {autoIncrement: true});\n\n            });\n        }\n\n        static closeConnection() {\n            if (connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n})();"]}